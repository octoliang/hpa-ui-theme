@charset "UTF-8";
@import "common/var";
@import "mixins/button";
@import "mixins/mixins";
@import "mixins/utils";

//by txk
@mixin new-Btn($Bgcolor: transparent){
  background-color:$Bgcolor;
}
@include b(button) {
  display: inline-block;
  padding: ($padding-sm - 2) ($padding-sm + 4);
  line-height: 1;
  white-space: nowrap;
  cursor: pointer;
  background: $white-color;
  border: $border-base;
  border-color: $border-color-base;
  color: $text-color;
  -webkit-appearance: none;
  text-align: center;
  box-sizing: border-box;
  outline: none;
  margin: 0;
  transition: .1s;
  font-weight: $font-weight-base;
  @include utils-user-select(none);
  & + .el-button {
    margin-left: $margin-xs;
  }

  @include button-size($padding-sm - 2, $padding-sm, $font-size-base, $border-radius-base);

  &:hover,
  &:focus {
    color: $primary-color-main;
    border-color: $primary-color-light-7;
    background-color: $primary-color-light-9;
  }

  &:active {
    color: mix($black-color, $primary-color-main, $btn-active-shade-percent);
    border-color: mix($black-color, $primary-color-main, $btn-active-shade-percent);
    outline: none;
  }

  &::-moz-focus-inner {
    border: 0;
  }

  & [class*="el-icon-"] {
    & + span {
      margin-left: 5px;
    }
  }

  @include when(plain) {
    &:hover,
    &:focus {
      background: $white-color;
      border-color: $primary-color-main;
      color: $primary-color-main;
    }

    &:active {
      background: $white-color;
      border-color: mix($black-color, $primary-color-main, $btn-active-shade-percent);
      color: mix($black-color, $primary-color-main, $btn-active-shade-percent);
      outline: none;
    }
  }

  @include when(active) {
    color: mix($black-color, $primary-color-main, $btn-active-shade-percent);
    border-color: mix($black-color, $primary-color-main, $btn-active-shade-percent);
  }

  @include when(disabled) {
    &,
    &:hover,
    &:focus {
      color: $text-color-disabled;
      cursor: not-allowed;
      background-image: none;
      background-color: $btn-disabled-bg;
      border-color: transparent;
    }

    &.el-button--text {
      background-color: transparent;
    }

    &.is-plain {
      &,
      &:hover,
      &:focus {
        background-color: $white-color;
        border-color: $border-color-sub;
        color: $text-color-disabled;
      }
    }
  }

  @include when(loading) {
    position: relative;
    pointer-events: none;

    &:before {
      pointer-events: none;
      content: '';
      position: absolute;
      left: -1px;
      top: -1px;
      right: -1px;
      bottom: -1px;
      border-radius: inherit;
      background-color: rgba(255,255,255,.35);
    }
  }
  
  @include when(round) {
    border-radius: 20px;
    padding: ($padding-sm - 2) $padding-base;
  }

  @include when(circle) {
    border-radius: 50%;
    padding: $padding-sm - 2;
  }

  @include m(primary) {
    @include button-variant($white-color, $primary-color, $primary-color);
  }

  @include m(info) {
    @include button-variant($white-color, $primary-color-main, $primary-color-main);
  }

  @include m(success) {
    @include button-variant($white-color, $success-color, $success-color);
  }

  @include m(warning) {
    @include button-variant($white-color, $warning-color, $warning-color);
  }

  @include m(danger) {
    @include button-variant($white-color, $danger-color, $danger-color);
  }

  @include m(huge) {
    @include button-size($padding-sm + 2, $padding-base, $font-size-lg, $border-radius-base);
    @include when(circle) {
      padding: $padding-sm + 2;
    }
  }

  @include m(large) {
    @include button-size($padding-sm + 1, $padding-base, $font-size-md, $border-radius-base);
    @include when(circle) {
      padding: $padding-sm + 1;
    }
  }

  @include m(medium) {
    @include button-size($padding-sm - 1, $padding-base, $font-size-md, $border-radius-base);
    @include when(circle) {
      padding: $padding-sm - 1;
    }
  }

  @include m(small) {
    @include button-size($padding-xs - 2, $padding-sm, $font-size-sm, $border-radius-sm);
    @include when(circle) {
      padding: $padding-xs - 2;
    }
  }

  @include m(mini) {
    @include button-size($padding-xs / 2, $padding-xs, $font-size-tiny, $border-radius-sm);
    @include when(circle) {
      padding: $padding-xs / 2;
    }
  }
  // @include m(tiny) {
  //   @include button-size($padding-xs / 2, $padding-xs, $font-size-tiny, $border-radius-sm);
  //   @include when(circle) {
  //     padding: $padding-xs / 2;
  //   }
  // }
  @include m(text) {
    border-color: transparent;
    color: $primary-color-main;
    background: transparent;
    padding-left: 0;
    padding-right: 0;

    &:hover,
    &:focus {
      color: mix($white-color, $primary-color-main, $btn-hover-tint-percent);
      border-color: transparent;
      background-color: transparent;
    }
    &:active {
      color: mix($black-color, $primary-color-main, $btn-active-shade-percent);
      border-color: transparent;
      background-color: transparent;
    }

    &.is-disabled,
    &.is-disabled:hover,
    &.is-disabled:focus {
      border-color: transparent;
    }
  }

  //by txk
  &-nb-green{
    background: transparent;
    color: $success-color;
    border-color: transparent;
    &:focus,
    &:hover{
      @include new-Btn($success-color);
      i{
        color:$white-color;
      }
    }
  }

  &-nb-blue{
    background: transparent;
    color: $primary-color-main;
    border-color: transparent;
    &:focus,
    &:hover{
      @include new-Btn($primary-color-main);
      i{ 
        color:$white-color;
      }
    }
  }

  &-block{
    width:100%;
    //  padding: 10px 20px;
    display: block;

    & + .el-button-block{
      margin-left: 0;
      margin-top: $margin-sm;
    }
  }
}

@include b(button-group) {
  @include utils-clearfix;
  display: inline-block;
  vertical-align: middle;

  & .el-button {
    float: left;
    position: relative;
    & + .el-button {
      margin-left: 0;
    }

    &:first-child {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    &:last-child {
      border-top-left-radius: 0px;
      border-bottom-left-radius: 0px;
    }
    &:first-child:last-child {
      border-top-right-radius: $border-radius-base;
      border-bottom-right-radius: $border-radius-base;
      border-top-left-radius: $border-radius-base;
      border-bottom-left-radius: $border-radius-base;
    }
    &:not(:first-child):not(:last-child) {
      border-radius: 0;
    }
    &:not(:last-child) {
      margin-right: -1px;
    }

    &:hover,
    &:focus,
    &:active {
      z-index: 1;
    }
    @include when(active) {
      z-index: 1;
    }
  }

  @each $type in (primary, success, warning, danger, info) {
    .el-button--#{$type} {
      &:first-child {
        border-right-color: rgba($white-color, 0.5);
      }
      &:last-child {
        border-left-color: rgba($white-color, 0.5);
      }
      &:not(:first-child):not(:last-child) {
        border-left-color: rgba($white-color, 0.5);
        border-right-color: rgba($white-color, 0.5);
      }
    }
  }
}
